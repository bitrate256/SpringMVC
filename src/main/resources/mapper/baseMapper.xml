<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="baseMapper">

	<!-- ###################################### 인증 ###################################### -->
	<!-- API 헤더에 담긴 인증키값 조회 -->
	<select id="checkbaseApi" resultType="Integer"
		parameterType="springMVC.vo.baseAPIKeyVO">
		SELECT count(*)
		FROM dbo.APIKey_T
		WHERE APIKey = #{APIKey}
	</select>
	<!-- ###################################### 인증 ###################################### -->



	<!-- ##################################### CREATE ##################################### -->
	<!-- insert, 데이터 추가 -->
	<!-- '신규등록' 버튼 -->
	<insert id="insertData"
		parameterType="springMVC.vo.baseVO">
		INSERT INTO rest_common_module_data_t (bno, ID, name, grade, gender,
		titleKor, titleEng, contentKor, contentEng, phoneNum, birthDate,
		juminNo, registeredDate, changedDate)
		VALUES ((select *from (select max(bno)+1 from rest_common_module_data_t)
		next),
		#{ID}, #{name}, #{grade}, #{gender}, #{titleKor}, #{titleEng},
		#{contentKor}, #{contentEng}, #{phoneNum}, #{birthDate}, #{juminNo},
		#{registeredDate}, #{changedDate})
	</insert>
	<!-- 동일 기능. 일련번호 증가하는 함수가 db별로 다를 수 있으며, 시퀀스 등 사용이 필요 -->
	<insert id="insertDataMssql"
		parameterType="springMVC.vo.baseVO">
		INSERT INTO dbo.Data_T (bno, ID, name, grade, gender, titleKor, titleEng,
		contentKor, contentEng, phoneNum, birthDate, juminNo, registeredDate,
		changedDate)
		VALUES ((NEXT VALUE FOR dbo.bno),
		#{ID}, #{name}, #{grade}, #{gender}, #{titleKor}, #{titleEng},
		#{contentKor}, #{contentEng}, #{phoneNum}, #{birthDate}, #{juminNo},
		#{registeredDate}, #{changedDate})
	</insert>
	<!-- ##################################### CREATE ##################################### -->



	<!-- ###################################### READ ###################################### -->
	<!-- SELECT -->
	<select id="selectDataListPage" resultType="java.util.HashMap"
		parameterType="springMVC.vo.baseVO">
		SELECT bno,
		ID,
		name,
		grade,
		gender,
		titleKor,
		titleEng,
		contentKor,
		contentEng,
		phoneNum,
		birthDate,
		juminNo,
		registeredDate,
		changedDate
		FROM dbo.Data_T
		WHERE 1 = 1
		<include refid="search"></include>
		<include refid="mssqlPaging"></include>
	</select>
	<!-- 토탈카운트 -->
	<select id="getTotalCount" resultType="int">
		SELECT count(ID)
		FROM dbo.Data_T
	</select>

	<!-- mysql 페이징 -->
	<sql id="mysqlPaging">
		ORDER BY bno DESC
		LIMIT #{Criteria.pageStart}, #{Criteria.perPageNum}
	</sql>

	<!-- mssql 페이징 -->
	<sql id="mssqlPaging">
		ORDER BY bno DESC
		OFFSET ((#{Criteria.page} - 1) * #{Criteria.perPageNum}) ROWS
		FETCH NEXT #{Criteria.perPageNum} ROWS ONLY
	</sql>

	<!-- 검색sql, searchType이 'no'일 때 1=1 조건을 넣어서 조건 없이 검색되도록 한다 -->
	<sql id="search">
		<choose>
			<!-- ########################################### keword 있음 ########################################### -->
			<when test="baseVO.keyword != null and !baseVO.keyword.equals('')">
				<!-- searchType 있음 -->
				<choose>
					<when test="baseVO.searchType != null and !baseVO.searchType.equals('')">
						<!-- 날짜 있으면 날짜 조건 추가 -->
						<include refid="checkDate"></include>
						<choose>
							<!-- 서치타입 t -->
							<when test="baseVO.searchType == 't'.toString()">
								AND titleKor like CONCAT('%', #{baseVO.keyword}, '%')
							</when>
							<!-- 서치타입 i -->
							<when test="baseVO.searchType == 'i'.toString()">
								AND ID like CONCAT('%', #{baseVO.keyword}, '%')
							</when>
						</choose>
					</when>
					<!-- searchType 없음 -->
					<when test="baseVO.searchType == null and baseVO.searchType.equals('')">
						OR ID like CONCAT('%', #{baseVO.keyword}, '%')
						OR titleKor like CONCAT('%', #{baseVO.keyword}, '%')
						<!-- 날짜 있으면 날짜 조건 추가 -->
						<include refid="checkDate"></include>
					</when>
				</choose>
			</when>
			<!-- ########################################### keword 없음 ########################################### -->
			<when test="baseVO.keyword == null and baseVO.keyword.equals('')">
				1 = 1
				<!-- 날짜 있으면 날짜 조건 추가 -->
				<include refid="checkDate"></include>
			</when>
		</choose>
	</sql>
	
	<!-- 날짜 있으면 날짜 조건 추가 -->
	<sql id="checkDate">
		<if test="baseVO.startDate != null and !baseVO.startDate.equals('') and baseVO.endDate != null and !baseVO.endDate.equals('')">
			AND registeredDate BETWEEN CONVERT(DATE, #{baseVO.startDate}) AND CONVERT(DATE, #{baseVO.endDate})
		</if>
	</sql>

	<!-- 데이터 상세조회 -->
	<select id="selectDataDetail" resultType="java.util.HashMap"
		parameterType="springMVC.vo.baseVO">
		SELECT *
		FROM dbo.Data_T
		WHERE bno = #{baseVO.bno}
	</select>
	<!-- ###################################### READ ###################################### -->



	<!-- ##################################### UPDATE ##################################### -->
	<!-- 데이터 업데이트, 전체 컬럼 -->
	<update id="updateData"
		parameterType="springMVC.vo.baseVO">
		UPDATE dbo.Data_T
		SET ID = #{ID}, name = #{name}, grade = #{grade}, gender = #{gender},
		titleEng = #{titleEng}, contentKor = #{contentKor}, contentEng =
		#{contentEng}, phoneNum = #{phoneNum}, birthDate = #{birthDate},
		juminNo = #{juminNo}, changedDate = #{changedDate}
		WHERE bno = #{bno}
	</update>
	<!-- ##################################### UPDATE ##################################### -->



	<!-- ##################################### DELETE ##################################### -->
	<!-- 데이터 삭제 -->
	<delete id="deleteData"
		parameterType="springMVC.vo.baseVO">
		DELETE FROM dbo.Data_T
		WHERE bno = #{bno}
	</delete>
	<!-- ##################################### DELETE ##################################### -->
</mapper>